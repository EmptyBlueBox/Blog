---
import PageLayout from '@/layouts/CommonPage.astro'
import { Image } from 'astro:assets'

import { Comment } from '@/components/advanced'
import dexterCapImage from '@/assets/projects/DexterCap-full.png'

// Assuming images are in public/images/projects/ or similar path.
// If using Astro's <Image> component, import it:
// import { Image } from 'astro:assets';
// And import the image if it's in src/assets:
// import dexterCapImage from '@/assets/projects/DexterCap.png';

const pageTitle =
  'DexterCap: An Affordable and Automated System for Capturing Dexterous Hand-Object Manipulation'

// PLACEHOLDER: Please update with actual authors and affiliations
const authors = [
  { name: 'Yutong Liang', sup: '1*', url: 'https://www.lyt0112.com' },
  { name: 'Shiyi Xu', sup: '1*', url: '#' },
  { name: 'Yulong Zhang', sup: '1*', url: '#' },
  { name: 'Bowen Zhan', sup: '1', url: '#' },
  { name: 'He Zhang', sup: '2', url: 'https://cghezhang.github.io' },
  { name: 'Libin Liu', sup: '1†', url: 'https://libliu.info' }
]
const affiliations = '1. Peking University, 2. Tencent'

// Updated author notes
const authorNotes = ['* Equal contribution.', '† Corresponding author.']

// PLACEHOLDER: Please update with actual links
const paperLink = '#'
const publicDataLink = 'https://huggingface.co/datasets/pku-mocca/DexterHand/tree/main'
const githubLink = 'https://github.com/PKU-MoCCA/hand-mocap'

// Assumed image path. If your image 'DexterCap.png' is elsewhere (e.g. src/assets),
// this path or the image handling method needs adjustment.
// const imageUrl = 'DexterCap.png'

// Overview text extracted from comments in projects/index.astro
const abstractContent = `Modeling complex, fine-grained hand-object interactions remains challenging, in
part due to the limited availability of dedicated datasets and specialized capture methods.
Existing motion capture systems are generally limited to basic motion types, such as grasping,
and interactions with primitive rigid or articulated objects. To facilitate the exploration of
intricate, dexterous in-hand manipulations with more complex objects, we present DexterCap. We
first design a robust, low-cost, and high-fidelity motion capture hardware system that acquires
reliable data even in the presence of self-occlusion and complex manipulation. To ensure
accurate capture despite severe occlusions, we introduce a specialized patch maker equipped with
an effective detection and optimization pipeline. We further develop an automated data
augmentation pipeline to reconstruct and refine motion data with minimal manual effort,
improving both efficiency and data quality. Using this system, we create the DexterHand dataset,
which includes subtle, fine-grained manipulation behaviors and interactions with multi-jointed
objects such as a Rubik's cube. By releasing the dataset and supporting source code to the
community, we hope that DexterCap will facilitate further research on intricate hand-object
interactions.`

// Headings for the right sidebar navigation
const headings = [
  { depth: 2, slug: 'abstract', text: 'Abstract' },
  { depth: 2, slug: 'dataset', text: 'Dataset' },
  { depth: 2, slug: 'citation', text: 'Citation' } // Example, add more if needed
]

const citationText = `@misc{liang2025dextercap,
  author       = {Yutong Liang, Shiyi Xu, Yulong Zhang, Bowen Zhan, He Zhang and Libin Liu},
  title        = {DexterCap: An Affordable and Automated System for Capturing Dexterous Hand-Object Manipulation},
  year         = {2025},
  publisher    = {arXiv},
  version      = {arXiv:#},
  doi          = {#},
  url          = {https://www.lyt0112.com/projects/DexterCap/}
}`
---

<PageLayout title={pageTitle} headings={headings} info='/DexterCap'>
  <style>
    .project-container {
      max-width: 768px;
      margin: 0 auto;
      padding: 1rem;
    }
    .project-header h1 {
      font-size: 2rem; /* Adjusted for consistency */
      font-weight: 700;
      line-height: 1.2;
      margin-bottom: 0.75rem;
    }
    .authors {
      font-size: 1.2rem; /* Increased font size */
      color: var(--text-color-primary); /* Using theme variables if available */
      margin-bottom: 0.25rem;
      text-align: center; /* Center align authors */
    }
    .authors a {
      color: var(--text-color-link);
      text-decoration: none;
    }
    .authors a:hover {
      text-decoration: underline;
    }
    .affiliations {
      font-size: 0.9rem; /* Adjusted */
      color: var(--text-color-secondary); /* Using theme variables if available */
      margin-bottom: 0.25rem;
      text-align: center; /* Center align affiliations */
    }
    .affiliations {
      margin-bottom: 1rem;
    }
    .author-notes {
      font-size: 0.8rem; /* Adjusted */
      color: var(--text-color-tertiary); /* Using theme variables if available */
      margin-bottom: 1.5rem;
      list-style-type: none;
      padding-left: 0;
      text-align: center; /* Center align author notes */
    }
    .author-notes p {
      margin-bottom: 0.25rem;
    }
    .project-links {
      margin-bottom: 2rem;
      display: flex;
      flex-wrap: wrap;
      gap: 0.75rem;
      justify-content: center; /* Center align buttons */
    }
    .project-links a {
      display: inline-flex; /* For icon alignment */
      align-items: center;
      gap: 0.5rem; /* Space between icon and text */
      background-color: var(--color-gray-700, #333); /* Darker background */
      color: var(--color-white, white);
      padding: 0.6rem 1.2rem; /* Adjusted padding */
      border-radius: 0.375rem; /* Tailwind md */
      text-decoration: none;
      font-weight: 500;
      transition: background-color 0.2s ease-in-out;
    }
    .project-links a:hover {
      background-color: var(--color-gray-600, #555); /* Lighter on hover */
    }
    .project-media {
      margin-top: 2rem;
      margin-bottom: 2rem;
      text-align: center;
    }
    .project-media img,
    .project-media video {
      max-width: 100%;
      height: auto;
      border-radius: 0.5rem; /* Tailwind lg */
      box-shadow: var(
        --shadow-md,
        0 4px 6px -1px rgba(0, 0, 0, 0.1),
        0 2px 4px -1px rgba(0, 0, 0, 0.06)
      );
    }
    .project-section h2 {
      font-size: 1.5rem; /* Adjusted */
      font-weight: 600;
      margin-top: 2.5rem;
      margin-bottom: 1rem;
      border-bottom: 1px solid var(--border-color, #eee);
      padding-bottom: 0.5rem;
    }
    .project-section p,
    .project-section pre {
      font-size: 1rem;
      line-height: 1.7; /* Increased for readability */
      margin-bottom: 1rem;
    }
    .project-section pre {
      background-color: var(--color-gray-100, #f4f4f4);
      padding: 1rem;
      border-radius: 0.375rem;
      overflow-x: auto;
      font-family: var(--font-mono, monospace);
      position: relative; /* For positioning the copy button */
      color: var(--code-text-color, var(--text-color)); /* Adapts to dark/light mode */
    }

    /* Style for the copy button */
    .copy-button {
      position: absolute;
      top: 0.5rem;
      right: 0.5rem;
      background-color: var(--color-gray-200, #e5e7eb);
      color: var(--color-gray-800, #1f2937);
      border: none;
      padding: 0.25rem 0.5rem;
      border-radius: 0.25rem;
      cursor: pointer;
      font-size: 0.8rem;
      transition: background-color 0.2s ease-in-out;
    }
    .copy-button:hover {
      background-color: var(--color-gray-300, #d1d5db);
    }

    /* Dark mode specific adjustments for pre and copy button if needed */
    :global(html.dark) .project-section pre {
      background-color: var(--color-gray-800, #1f2937); /* Darker for pre background */
      color: var(--color-gray-200, #e5e7eb); /* Lighter text for pre */
    }
    :global(html.dark) .copy-button {
      background-color: var(--color-gray-700, #374151);
      color: var(--color-gray-100, #f3f4f6);
    }
    :global(html.dark) .copy-button:hover {
      background-color: var(--color-gray-600, #4b5563);
    }

    /* Video Gallery Styles */
    .video-gallery {
      display: flex;
      flex-direction: column;
      align-items: center;
      gap: 1rem;
      margin-bottom: 1rem; /* Add some space below the gallery */
    }
    .main-video-container {
      width: 100%;
      max-width: 720px; /* Adjust as needed */
    }
    #gallery-main-video {
      /* Ensure it's properly styled if not covered by inline */
      box-shadow: var(
        --shadow-md,
        0 4px 6px -1px rgba(0, 0, 0, 0.1),
        0 2px 4px -1px rgba(0, 0, 0, 0.06)
      );
    }
    .video-navigation {
      display: flex;
      align-items: center;
      justify-content: center;
      gap: 1rem;
      margin-top: 0.5rem;
    }
    .video-nav-button {
      /* Style for prev/next buttons */
      background-color: var(--color-gray-200, #e5e7eb);
      color: var(--color-gray-800, #1f2937);
      border: none;
      padding: 0.5rem 1rem;
      border-radius: 0.375rem; /* Tailwind md */
      cursor: pointer;
      font-size: 1.2rem; /* Slightly larger for arrows */
      line-height: 1;
      transition: background-color 0.2s ease-in-out;
    }
    .video-nav-button:hover {
      background-color: var(--color-gray-300, #d1d5db);
    }
    :global(html.dark) .video-nav-button {
      background-color: var(--color-gray-700, #374151);
      color: var(--color-gray-100, #f3f4f6);
    }
    :global(html.dark) .video-nav-button:hover {
      background-color: var(--color-gray-600, #4b5563);
    }
    .video-selectors {
      display: flex;
      gap: 0.75rem; /* Spacing between dots */
      align-items: center;
    }
    .video-selector-dot {
      width: 12px;
      height: 12px;
      background-color: var(--color-gray-300, #d1d5db);
      border-radius: 50%;
      cursor: pointer;
      border: none; /* Ensure it looks like a dot not a button */
      padding: 0; /* Reset padding for button element */
      transition:
        background-color 0.2s ease-in-out,
        transform 0.2s ease-in-out;
    }
    .video-selector-dot.active {
      background-color: var(--color-accent, var(--color-blue-500, #3b82f6));
      transform: scale(1.2); /* Make active dot slightly larger */
    }
    :global(html.dark) .video-selector-dot {
      background-color: var(--color-gray-600, #4b5563);
    }
    :global(html.dark) .video-selector-dot.active {
      background-color: var(--color-accent-dark, var(--color-blue-400, #60a5fa));
    }
  </style>

  <div class='project-container'>
    <div class='authors'>
      {
        authors.map((author, index) => (
          <>
            <a href={author.url} target='_blank' rel='noopener noreferrer'>
              {author.name}
            </a>
            <sup>{author.sup}</sup>
            {index < authors.length - 1 && ', '}
          </>
        ))
      }
    </div>
    <p class='affiliations'>{affiliations}</p>
    <div class='author-notes'>
      {authorNotes.map((note) => <p>{note}</p>)}
    </div>

    <nav class='project-links'>
      <a href={paperLink} target='_blank' rel='noopener noreferrer'>
        <svg xmlns='http://www.w3.org/2000/svg' width='1em' height='1em' viewBox='0 0 24 24'
          ><path
            fill='currentColor'
            d='M14 2H6c-1.1 0-1.99.9-1.99 2L4 20c0 1.1.89 2 1.99 2H18c1.1 0 2-.9 2-2V8zm-1 9H7v-2h6zm3-4H7V5h9zm-3 7H7v-2h6z'
          ></path></svg
        >
        Paper
      </a>
      <a href={githubLink} target='_blank' rel='noopener noreferrer'>
        <svg xmlns='http://www.w3.org/2000/svg' width='1em' height='1em' viewBox='0 0 24 24'
          ><path
            fill='currentColor'
            d='M12 2C6.475 2 2 6.475 2 12a9.994 9.994 0 0 0 6.838 9.488c.5.087.687-.213.687-.476c0-.237-.013-1.024-.013-1.862c-2.512.463-3.162-.612-3.362-1.175c-.113-.288-.6-1.175-1.025-1.413c-.35-.187-.85-.65-.013-.662c.788-.013 1.35.725 1.538 1.025c.9 1.512 2.338 1.087 2.912.825c.088-.65.35-1.087.638-1.337c-2.225-.25-4.55-1.113-4.55-4.938c0-1.088.387-1.987 1.025-2.688c-.1-.25-.45-1.275.1-2.65c0 0 .837-.262 2.75 1.026a9.28 9.28 0 0 1 2.5-.338a9.28 9.28 0 0 1 2.5.338c1.912-1.3 2.75-1.026 2.75-1.026c.55 1.375.2 2.4.1 2.65c.637.7 1.025 1.6 1.025 2.688c0 3.837-2.337 4.687-4.562 4.937c.362.312.675.912.675 1.85c0 1.337-.013 2.412-.013 2.75c0 .262.188.574.688.474A10.016 10.016 0 0 0 22 12c0-5.525-4.475-10-10-10'
          ></path></svg
        >
        Code
      </a>
      <a href={publicDataLink} target='_blank' rel='noopener noreferrer'>
        <svg xmlns='http://www.w3.org/2000/svg' width='1em' height='1em' viewBox='0 0 24 24'
          ><path
            fill='currentColor'
            d='M18 2h-8L4 8v12c0 1.1.9 2 2 2h12c1.1 0 2-.9 2-2V4c0-1.1-.9-2-2-2m-6 15h-2v-2h2zm0-4h-2v-2h2zm0-4h-2V7h2z'
          ></path></svg
        >
        Dataset
      </a>
      <a
        href='https://huggingface.co/datasets/pku-mocca/DexterHand-rerun'
        target='_blank'
        rel='noopener noreferrer'
      >
        <svg xmlns='http://www.w3.org/2000/svg' width='1em' height='1em' viewBox='0 0 24 24'
          ><path
            fill='currentColor'
            d='M18 2h-8L4 8v12c0 1.1.9 2 2 2h12c1.1 0 2-.9 2-2V4c0-1.1-.9-2-2-2m-6 15h-2v-2h2zm0-4h-2v-2h2zm0-4h-2V7h2z'
          ></path></svg
        >
        Dataset Rerun
      </a>
      <!-- Example: GitHub Link -->
      <!--
      <a href={githubLink} target="_blank" rel="noopener noreferrer">
        <svg xmlns="http://www.w3.org/2000/svg" width="1em" height="1em" viewBox="0 0 24 24"><path fill="currentColor" d="M12 2A10 10 0 0 0 2 12a10 10 0 0 0 10 10a10 10 0 0 0 10-10A10 10 0 0 0 12 2m-1.3 15.3c-.3.2-.5.2-.7 0L7.6 15c-.2-.2-.2-.5 0-.7l2.4-2.4c.2-.2.5-.2.7 0l2.4 2.4c.2.2.5.2.7 0l2.4-2.4c.2-.2.2-.5 0-.7z"/></svg>
        GitHub
      </a>
      -->
    </nav>

    <section class='project-media'>
      <Image src={dexterCapImage} alt='DexterCap Project Visualization' />
      <!-- If you have a video, you could use:
      <video controls src="/path/to/your/video.mp4" style="max-width: 100%; border-radius: 0.5rem;"></video>
      Or an iframe for YouTube/Vimeo:
      <iframe width="560" height="315" src="https://www.youtube.com/embed/YOUR_VIDEO_ID" title="YouTube video player" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture" allowfullscreen style="max-width: 100%; border-radius: 0.5rem;"></iframe>
      -->
    </section>

    <article class='project-section'>
      <h2 id='abstract'>Abstract</h2>
      <p>{abstractContent}</p>
    </article>

    <section class='project-section'>
      <h2 id='dataset'>Dataset Gallery (Click to play)</h2>
      <div class='video-gallery'>
        <div class='main-video-container'>
          <video
            id='gallery-main-video'
            controls
            preload='metadata'
            style='width: 100%; border-radius: 0.5rem;'
            poster=''
          >
            <!-- Source and poster will be set by JS -->
          </video>
          <figcaption
            id='gallery-main-caption'
            style='text-align: center; font-size: 0.9rem; margin-top: 0.5rem;'
          >
          </figcaption>
        </div>
        <div class='video-navigation'>
          <button id='prev-video-btn' class='video-nav-button' aria-label='Previous video'
            >&lt;</button
          >
          <div id='video-thumbnails-or-dots' class='video-selectors'>
            <!-- Dots will be populated by JS -->
          </div>
          <button id='next-video-btn' class='video-nav-button' aria-label='Next video'>&gt;</button>
        </div>
      </div>
    </section>

    <section class='project-section'>
      <h2 id='citation'>Citation</h2>
      <p>If you find DexterCap useful in your research, please consider citing:</p>
      <div style='position: relative;'>
        <pre><code id="citation-code">{citationText}</code></pre>
        <button class='copy-button' id='copy-citation-button'>Copy</button>
      </div>
    </section>
  </div>

  <Comment slot='bottom' />
</PageLayout>

<script>
  document.addEventListener('DOMContentLoaded', () => {
    // --- Existing Copy Citation Logic ---
    function copyCitation() {
      const citationCode = document.getElementById('citation-code') as HTMLElement
      if (citationCode) {
        navigator.clipboard
          .writeText(citationCode.innerText)
          .then(() => {
            const button = document.getElementById('copy-citation-button') as HTMLButtonElement
            if (button) {
              button.innerText = 'Copied!'
              setTimeout(() => {
                button.innerText = 'Copy'
              }, 2000)
            }
          })
          .catch((err) => {
            console.error('Failed to copy citation: ', err)
          })
      }
    }

    const copyButton = document.getElementById('copy-citation-button')
    if (copyButton) {
      copyButton.addEventListener('click', copyCitation)
    }

    // --- New Video Gallery Logic ---
    const galleryVideos = [
      {
        src: 'https://cdn.lyt0112.com/Projects/DexterCap/rubikscube1.mp4',
        title: "Rubik's Cube Algorithm",
        poster: ''
      },
      {
        src: 'https://cdn.lyt0112.com/Projects/DexterCap/rubikscube2.mp4',
        title: "Rubik's Cube Basic Rotation",
        poster: ''
      },
      {
        src: 'https://cdn.lyt0112.com/Projects/DexterCap/cuboid0.mp4',
        title: 'Cuboid 0',
        poster: ''
      },
      {
        src: 'https://cdn.lyt0112.com/Projects/DexterCap/cuboid1.mp4',
        title: 'Cuboid 1',
        poster: ''
      },
      {
        src: 'https://cdn.lyt0112.com/Projects/DexterCap/cuboid2.mp4',
        title: 'Cuboid 2',
        poster: ''
      },
      {
        src: 'https://cdn.lyt0112.com/Projects/DexterCap/cylinder1.mp4',
        title: 'Cylinder',
        poster: ''
      },
      {
        src: 'https://cdn.lyt0112.com/Projects/DexterCap/plate1.mp4',
        title: 'Plate',
        poster: ''
      },
      {
        src: 'https://cdn.lyt0112.com/Projects/DexterCap/prism1.mp4',
        title: 'Prism 1',
        poster: ''
      },
      {
        src: 'https://cdn.lyt0112.com/Projects/DexterCap/prism2.mp4',
        title: 'Prism 2',
        poster: ''
      },
      {
        src: 'https://cdn.lyt0112.com/Projects/DexterCap/ring1.mp4',
        title: 'Ring 1',
        poster: ''
      },
      {
        src: 'https://cdn.lyt0112.com/Projects/DexterCap/ring2.mp4',
        title: 'Ring 2',
        poster: ''
      }
    ]
    let currentVideoIndex = 0 // Default to the first video

    const mainVideoElement = document.getElementById('gallery-main-video') as HTMLVideoElement
    const mainCaptionElement = document.getElementById('gallery-main-caption') as HTMLElement
    const prevButtonElement = document.getElementById('prev-video-btn') as HTMLButtonElement
    const nextButtonElement = document.getElementById('next-video-btn') as HTMLButtonElement
    const selectorsContainerElement = document.getElementById(
      'video-thumbnails-or-dots'
    ) as HTMLElement

    /**
     * Updates the main video player with the video at the given index.
     * - video (HTMLVideoElement): The main video DOM element.
     * - caption (HTMLElement): The caption DOM element for the video.
     * - index (number): The index of the video in the galleryVideos array.
     * - poster (string, optional): URL for a poster image.
     */
    function updateGalleryVideo(index: number) {
      if (!mainVideoElement || !mainCaptionElement || index < 0 || index >= galleryVideos.length) {
        // console.warn('Video gallery element not found or index out of bounds.');
        return
      }

      const videoData = galleryVideos[index]
      mainVideoElement.src = videoData.src
      mainVideoElement.poster = videoData.poster || ''
      mainCaptionElement.textContent = videoData.title

      if (selectorsContainerElement) {
        const dots = selectorsContainerElement.querySelectorAll('.video-selector-dot')
        dots.forEach((dot, dotIndex) => {
          if (dot) {
            if (dotIndex === index) {
              dot.classList.add('active')
            } else {
              dot.classList.remove('active')
            }
          }
        })
      }
      currentVideoIndex = index
    }

    /**
     * Populates the video selector area (e.g., dots) for the gallery.
     * - container (HTMLElement): The DOM element to populate with selectors.
     * - videos (Array<Object>): An array of video data objects.
     * - onClickCallback (Function): Callback function when a selector is clicked, receives video index.
     */
    function createSelectors() {
      if (!selectorsContainerElement) return
      selectorsContainerElement.innerHTML = ''

      galleryVideos.forEach((video, index) => {
        const dot = document.createElement('button')
        dot.classList.add('video-selector-dot')
        dot.setAttribute('aria-label', `Select video: ${video.title}`)
        dot.addEventListener('click', () => updateGalleryVideo(index))
        selectorsContainerElement.appendChild(dot)
      })
    }

    // Initialize gallery only if all required DOM elements are present
    if (
      mainVideoElement &&
      mainCaptionElement &&
      prevButtonElement &&
      nextButtonElement &&
      selectorsContainerElement
    ) {
      createSelectors()
      if (galleryVideos.length > 0) {
        updateGalleryVideo(0) // Load the first video by default
      }

      prevButtonElement.addEventListener('click', () => {
        let newIndex = currentVideoIndex - 1
        if (newIndex < 0) {
          newIndex = galleryVideos.length - 1 // Loop to last
        }
        updateGalleryVideo(newIndex)
      })

      nextButtonElement.addEventListener('click', () => {
        let newIndex = currentVideoIndex + 1
        if (newIndex >= galleryVideos.length) {
          newIndex = 0 // Loop to first
        }
        updateGalleryVideo(newIndex)
      })
    } else {
      // Optional: console.warn for debugging if elements are missing
      // console.warn('One or more video gallery DOM elements not found. Gallery not initialized.');
    }
  })
</script>
