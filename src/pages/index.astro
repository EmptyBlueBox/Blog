---
import PageLayout from '@/layouts/BaseLayout.astro'
import { Image } from 'astro:assets'

import PostPreview from '@/components/blog/PostPreview.astro'
import Section from '@/components/home/Section.astro'
import SkillLayout from '@/components/home/SkillLayout.astro'
import { Button, Card, Label } from '@/components/user'
import { getAllCollections, sortMDByDate } from '@/utils'
import avatar from '@/assets/avatar/avatar_cubing.jpeg'
import { siteConfig } from '@/site-config'

const MAX_POSTS = 10
const allPosts = await getAllCollections()
const allPostsByDate = sortMDByDate(allPosts).slice(0, MAX_POSTS)
---

<style>
  /* Define theme variables for consistency */
  :root {
    --primary-color: #0077ed;
    --primary-color-dark: #0082f7;
    --secondary-color: #f0f0f0;
    --border-gradient-start: #e66465;
    --border-gradient-end: #9198e5;
    --shadow-light: rgba(0, 0, 0, 0.1);
    --shadow-dark: rgba(0, 0, 0, 0.2);
  }

  .image-wrapper {
    margin-right: 24px;
    width: 40%;
    height: auto;
  }

  .content {
    overflow: auto; /* Clear floats */
  }

  /* Enhanced dynamic border with a gradient outline */
  .dynamic-border {
    border: 2px solid transparent;
    border-radius: 12px;
    padding: 16px;
    background:
      linear-gradient(white, white) padding-box,
      linear-gradient(45deg, var(--border-gradient-start), var(--border-gradient-end)) border-box;
    box-shadow: 0 4px 6px var(--shadow-light);
    transition:
      transform 0.3s ease,
      box-shadow 0.3s ease;
  }

  .dynamic-border:hover {
    transform: translateY(-2px);
    box-shadow: 0 6px 8px var(--shadow-dark);
  }

  /* Refined modern button with interactive icons */
  .apple-modern-button {
    background: none !important;
    border-radius: 12px !important;
    padding: 12px 28px !important;
    font-size: 15px !important;
    font-weight: 500 !important;
    letter-spacing: -0.01em !important;
    display: inline-flex !important;
    align-items: center !important;
    gap: 8px !important;
    transition:
      background-color 0.2s ease,
      transform 0.2s ease;
  }

  .apple-modern-button:hover {
    background-color: var(--secondary-color) !important;
  }

  .apple-modern-button svg {
    width: 16px;
    height: 16px;
    transition: transform 0.2s ease;
  }

  .apple-modern-button:hover svg {
    transform: translateX(2px);
  }

  /* 添加夜间模式样式 */
  :global(.dark) .apple-modern-button {
    color: var(--text-primary-dark, #fff) !important;
  }

  :global(.dark) .apple-modern-button:hover {
    background-color: rgba(255, 255, 255, 0.1) !important;
  }

  /* 添加文本渐变效果 */
  .gradient-text {
    background: linear-gradient(90deg, #ff6b6b, #55f5f5, #3e93ed);
    -webkit-background-clip: text;
    background-clip: text;
    color: transparent;
    animation: gradientFlow 6s ease infinite;
    background-size: 400% 100%;
    padding-bottom: 2px; /* Add padding to prevent text from being cut off */
  }

  @keyframes gradientFlow {
    0% {
      background-position: 0% 50%;
    }
    50% {
      background-position: 100% 50%;
    }
    100% {
      background-position: 0% 50%;
    }
  }

  /* 加载动画 */
  .loading-dots {
    animation: loadingDots 1.5s infinite;
  }

  @keyframes loadingDots {
    0%,
    20% {
      opacity: 1;
    }
    50% {
      opacity: 0.5;
    }
    100% {
      opacity: 1;
    }
  }

  /* 点击刷新样式 */
  #total-pageview-count {
    cursor: pointer;
  }

  #total-pageview-count:hover {
    color: var(--primary-color, #0077ed);
  }

  /* 简洁的脉冲加载效果 */
  .pageview-counter-wrapper {
    display: inline-block;
    position: relative;
  }

  /* 脉冲动画 */
  .pulse-loading {
    animation: pulseLoad 2s ease-in-out infinite;
  }

  @keyframes pulseLoad {
    0%,
    100% {
      transform: scale(1);
      box-shadow: 0 0 0 0 rgba(0, 122, 255, 0.4);
    }
    50% {
      transform: scale(1.02);
      box-shadow: 0 0 0 8px rgba(0, 122, 255, 0);
    }
  }

  /* 夜间模式的脉冲效果 */
  :global(.dark) .pulse-loading {
    animation: pulseLoadDark 2s ease-in-out infinite;
  }

  @keyframes pulseLoadDark {
    0%,
    100% {
      transform: scale(1);
      box-shadow: 0 0 0 0 rgba(10, 132, 255, 0.4);
    }
    50% {
      transform: scale(1.02);
      box-shadow: 0 0 0 8px rgba(10, 132, 255, 0);
    }
  }

  /* 加载指示器 */
  .loading-indicator {
    display: none; /* 完全不占据空间 */
    align-items: center;
    gap: 6px;
    margin-left: 6px;
  }

  .loading-indicator.show {
    display: inline-flex;
  }

  /* 简洁的进度条 */
  .progress-bar {
    width: 32px;
    height: 2px;
    background-color: rgba(0, 122, 255, 0.15);
    border-radius: 1px;
    overflow: hidden;
    position: relative;
  }

  .progress-fill {
    height: 100%;
    background: linear-gradient(90deg, #007aff, #5ac8fa);
    border-radius: 1px;
    transition: width 0.4s cubic-bezier(0.4, 0, 0.2, 1);
    width: 0%;
  }

  /* 进度文本 */
  .progress-text {
    font-size: 10px;
    color: #007aff;
    font-weight: 500;
    min-width: 24px;
    text-align: center;
  }

  /* 夜间模式 */
  :global(.dark) .progress-bar {
    background-color: rgba(10, 132, 255, 0.2);
  }

  :global(.dark) .progress-fill {
    background: linear-gradient(90deg, #0a84ff, #5ac8fa);
  }

  :global(.dark) .progress-text {
    color: #0a84ff;
  }

  /* Tooltip样式 */
  .pageview-tooltip {
    position: absolute;
    bottom: 100%;
    left: 50%;
    transform: translateX(-50%);
    margin-bottom: 8px;
    padding: 10px 14px;
    background-color: rgba(255, 255, 255, 0.95);
    color: #1f2937;
    border-radius: 8px;
    font-size: 12px;
    line-height: 1.4;
    white-space: nowrap;
    opacity: 0;
    visibility: hidden;
    transition:
      opacity 0.3s ease,
      visibility 0.3s ease,
      transform 0.3s ease;
    transform: translateX(-50%) translateY(-4px);
    z-index: 1000;
    box-shadow: 0 4px 12px rgba(0, 0, 0, 0.25);
  }

  .pageview-tooltip::after {
    content: '';
    position: absolute;
    top: 100%;
    left: 50%;
    transform: translateX(-50%);
    border: 5px solid transparent;
    border-top-color: rgba(255, 255, 255, 0.95);
  }

  .pageview-counter-wrapper:hover .pageview-tooltip {
    opacity: 1;
    visibility: visible;
    transform: translateX(-50%) translateY(0);
  }

  /* 夜间模式tooltip */
  :global(.dark) .pageview-tooltip {
    background-color: rgba(0, 0, 0, 0.9);
    color: white;
    box-shadow: 0 4px 12px rgba(0, 0, 0, 0.15);
  }

  :global(.dark) .pageview-tooltip::after {
    border-top-color: rgba(0, 0, 0, 0.9);
  }

  /* Tooltip内容样式 */
  .tooltip-item {
    display: flex;
    align-items: center;
    gap: 6px;
    margin: 2px 0;
  }

  .tooltip-item:first-child {
    margin-top: 0;
  }

  .tooltip-item:last-child {
    margin-bottom: 0;
  }

  .tooltip-label {
    font-weight: 600;
    color: #007aff;
  }

  :global(.dark) .tooltip-label {
    color: #0a84ff;
  }
</style>

<PageLayout meta={{ title: 'Home' }} highlightColor='#659EB966'>
  <div class='flex w-full flex-col gap-y-10 md:w-4/5 lg:w-5/6'>
    <section class='animate flex flex-col items-center gap-y-8'>
      <div class='flex items-center gap-x-6'>
        <div
          class='flex-shrink-0 overflow-hidden rounded-full shadow-sm transition-shadow duration-300 hover:shadow-md'
        >
          <Image src={avatar} alt='profile' class='h-40 w-40 object-cover' loading='eager' />
        </div>

        <div class='flex flex-col items-start gap-y-4'>
          <!-- <h1 class='text-4xl font-medium tracking-tight text-gray-900 dark:text-gray-100 gradient-text'>{siteConfig.author}</h1> -->
          <h1 class='text-4xl font-medium tracking-tight text-gray-900 dark:text-gray-100'>
            {siteConfig.author}
          </h1>
          <div class='flex flex-wrap gap-x-5 gap-y-3'>
            <Label
              title='Beijing · China'
              class='text-gray-600 transition-colors hover:text-gray-900 dark:text-gray-300 dark:hover:text-gray-100'
            >
              <svg class='size-5' slot='icon'>
                <use href='/icons/social.svg#mingcute-location-line'></use>
              </svg>
            </Label>
            <Label
              title='GitHub'
              as='a'
              href='https://github.com/EmptyBlueBox'
              target='_blank'
              class='text-gray-600 transition-colors hover:text-gray-900 dark:text-gray-300 dark:hover:text-gray-100'
            >
              <svg class='size-5' slot='icon'>
                <use href='/icons/social.svg#mingcute-github-line'></use>
              </svg>
            </Label>
          </div>
        </div>
      </div>
    </section>

    <div class='mb-0 mt-0 flex flex-wrap justify-center text-sm'>
      <div class='pageview-counter-wrapper'>
        <div
          id='pageview-counter'
          class='pageview-counter flex items-center gap-2 rounded-full border border-gray-200 px-4 py-2 shadow-sm dark:border-gray-700'
        >
          <svg
            class='size-4 text-blue-500'
            viewBox='0 0 24 24'
            fill='none'
            stroke='currentColor'
            stroke-width='2'
            stroke-linecap='round'
            stroke-linejoin='round'
          >
            <path d='M2 12s3-7 10-7 10 7 10 7-3 7-10 7-10-7-10-7Z'></path>
            <circle cx='12' cy='12' r='3'></circle>
          </svg>
          <span class='text-gray-700 dark:text-gray-300'>
            <span class='inline-flex items-center gap-1.5'>
              <span
                >Home <span class='waline-pageview-count font-medium' data-path='/'>-</span></span
              >
              <span class='text-gray-400'>|</span>
              <span class='inline-flex items-center gap-1'>
                <span
                  >Site <span
                    id='total-pageview-count'
                    class='font-medium transition-all duration-300'
                    title='Click to refresh (includes all blog posts)'>-</span
                  ></span
                >
                <div id='loading-indicator' class='loading-indicator'>
                  <div class='progress-bar'>
                    <div id='progress-fill' class='progress-fill'></div>
                  </div>
                  <span id='progress-text' class='progress-text'>0%</span>
                </div>
              </span>
            </span>
          </span>
        </div>
        <div class='pageview-tooltip'>
          <div class='tooltip-item'>
            <span class='tooltip-label'>Home:</span>
            <span>Homepage (this page) visits only</span>
          </div>
          <div class='tooltip-item'>
            <span class='tooltip-label'>Site:</span>
            <span>All pages (including blog posts) visits</span>
          </div>
        </div>
      </div>
    </div>

    <Section title='Brief'>
      <p>
        Hi there! 👋 I'm Yutong Liang, a senior undergraduate at the School of EECS, Peking
        University, majoring in Computer Science.
      </p>
      <p>
        I'm interested in the field of character animation/embodied AI, supervised by Prof. Libin
        Liu in the VCL Lab of Peking University.
      </p>
      <p>
        I am driven by a passion to unravel and replicate the intricacies of human dexterity,
        specifically in areas like human-object interaction (HOI) and sophisticated in-hand
        manipulation. My long-term vision is to contribute to systems where robots and virtual
        agents can not only understand and mimic but also creatively generate complex, human-like
        dexterous actions, thereby enhancing their capabilities and their ability to interact
        naturally within our world.
      </p>
      <Button title='More About Me' class='apple-modern-button w-fit' href='/about' style='ahead'>
        More About Me
      </Button>
    </Section>

    <Section title='Education'>
      <Card
        as='a'
        heading='Peking University'
        subheading='Full-time Undergraduate Student'
        date='September 2021 - July 2025 (Expected)'
        href='https://www.pku.edu.cn/'
        imagePath='/src/assets/homepage/pku.png'
      >
        <ul class='ms-4 list-disc text-muted-foreground'>
          <li>Major: Computer Science</li>
          <li>School: EECS</li>
        </ul>
      </Card>
      <Card
        as='a'
        heading='Nankai High School'
        subheading='Full-time High School Student'
        date='September 2018 - July 2021'
        href='https://nkzx.tj.edu.cn/'
        imagePath='/src/assets/homepage/nk.png'
      >
        <ul class='ms-4 list-disc text-muted-foreground'>
          <li>Location: Nankai, Tianjin</li>
        </ul>
      </Card>
    </Section>

    {
      allPostsByDate.length > 0 && (
        <Section title='Blogs'>
          <ul class='flex flex-col gap-y-1.5 sm:gap-y-2'>
            {allPostsByDate.map((p) => (
              <li class='flex flex-col gap-x-2 sm:flex-row'>
                <PostPreview post={p} />
              </li>
            ))}
          </ul>
          <Button title='More blogs' class='apple-modern-button w-fit' href='/blog' style='ahead' />
        </Section>
      )
    }

    <Section title='This site'>
      <p class='text-muted-foreground'>
        The personalized customization of this website relies on the resources and technical support
        provided by the following outstanding projects and service providers:
      </p>
      <SkillLayout title='Framework' skills={['Astro']} hrefs={['https://astro.build/']} />
      <SkillLayout
        title='Theme'
        skills={['Astro theme pure']}
        hrefs={['https://github.com/cworld1/astro-theme-pure']}
      />
      <SkillLayout title='Hosting' skills={['Vercel']} hrefs={['https://vercel.com/']} />
      <SkillLayout
        title='CI/CD'
        skills={['Vercel Workflow']}
        hrefs={['https://vercel.com/workflow']}
      />
      <SkillLayout title='CDN' skills={['Doge Cloud']} hrefs={['https://console.dogecloud.com/']} />
      <SkillLayout
        title='Visits'
        skills={['Waline', 'Supabase']}
        hrefs={['https://waline.js.org', 'https://supabase.com/']}
      />
      <SkillLayout title='Comment' skills={['Waline']} hrefs={['https://waline.js.org/']} />
      <SkillLayout
        title='Follower statistics'
        skills={['Substats']}
        hrefs={['https://github.com/spencerwooo/substats']}
      />
    </Section>
  </div>
</PageLayout>

<script is:inline>
  // Load waline pageview count functionality for homepage
  ;(async function () {
    if (typeof window !== 'undefined') {
      // Dynamic import for client-side only
      const { pageviewCount } = await import(
        'https://cdn.jsdelivr.net/npm/@waline/client@v3/dist/pageview.js'
      )
      pageviewCount({
        serverURL: 'https://waline.lyt0112.com',
        path: '/' // This only counts homepage visits, not site-wide total
      })
    }
  })()

  // Custom script to calculate total page views across the site
  ;(function () {
    if (typeof window !== 'undefined') {
      const totalElement = document.getElementById('total-pageview-count')
      const loadingIndicator = document.getElementById('loading-indicator')
      const pageviewCounter = document.getElementById('pageview-counter')
      const progressFill = document.getElementById('progress-fill')
      const progressText = document.getElementById('progress-text')
      if (!totalElement || !loadingIndicator || !pageviewCounter || !progressFill || !progressText)
        return

      let isLoading = false

      // 显示加载状态
      function showLoading() {
        loadingIndicator.classList.add('show')
        pageviewCounter.classList.add('pulse-loading')
        updateProgress(0)
      }

      // 隐藏加载状态
      function hideLoading() {
        loadingIndicator.classList.remove('show')
        pageviewCounter.classList.remove('pulse-loading')
      }

      // 更新进度
      function updateProgress(percentage) {
        const clampedPercentage = Math.max(0, Math.min(100, percentage))
        progressFill.style.width = clampedPercentage + '%'
        progressText.textContent = Math.round(clampedPercentage) + '%'
      }

      async function loadTotalPageviews(forceRefresh = false) {
        if (isLoading) return
        isLoading = true

        totalElement.textContent = '...'
        totalElement.classList.add('loading-dots')
        showLoading()

        try {
          const cacheKey = 'total-pageview-cache'
          const cacheTimeKey = 'total-pageview-cache-time'
          const cacheExpiry = 60 * 60 * 1000 // 1小时

          // 检查完整缓存
          if (!forceRefresh) {
            const cached = localStorage.getItem(cacheKey)
            const cacheTime = localStorage.getItem(cacheTimeKey)

            if (cached && cacheTime && Date.now() - parseInt(cacheTime) < cacheExpiry) {
              totalElement.textContent = cached // 缓存数据直接显示，无需省略号
              totalElement.classList.remove('loading-dots')
              hideLoading()
              isLoading = false
              return
            }
          }

          // 第一步：获取主要页面访问量（快速显示）
          const mainPaths = ['/', '/about', '/projects', '/blog', '/links', '/search', '/tags']
          const serverURL = 'https://waline.lyt0112.com'

          const mainApiURL = `${serverURL}/api/article?path=${encodeURIComponent(mainPaths.join(','))}&type=${encodeURIComponent(['time'])}&lang=en-US`

          const mainResponse = await fetch(mainApiURL)
          const mainResult = await mainResponse.json()

          let mainTotal = 0
          if (mainResult.data && Array.isArray(mainResult.data)) {
            mainTotal = mainResult.data.reduce((sum, item) => {
              return sum + (typeof item.time === 'number' ? item.time : 0)
            }, 0)
          }

          // 先显示主要页面总数，给用户快速反馈
          totalElement.textContent = mainTotal.toString() + '...'
          // 保持loading-dots类，继续显示加载动画
          updateProgress(20) // 主要页面加载完成，显示20%进度

          // 第二步：异步获取博客文章访问量
          setTimeout(async () => {
            try {
              const allPosts = []

              // 获取博客文章列表
              try {
                const response = await fetch('/rss.xml')
                const xmlText = await response.text()
                const parser = new DOMParser()
                const xml = parser.parseFromString(xmlText, 'application/xml')
                const items = xml.querySelectorAll('item')

                items.forEach((item) => {
                  const link = item.querySelector('link')?.textContent
                  if (link) {
                    const url = new URL(link)
                    allPosts.push(url.pathname)
                  }
                })
                updateProgress(30) // 博客列表获取完成
              } catch (error) {
                console.warn('Failed to fetch blog posts for total count:', error)
                // 如果获取博客文章失败，显示主要页面的总数
                totalElement.textContent = mainTotal.toString() // 完成时移除省略号
                totalElement.classList.remove('loading-dots') // 移除加载动画
                localStorage.setItem(cacheKey, mainTotal.toString())
                localStorage.setItem(cacheTimeKey, Date.now().toString())
                hideLoading()
                isLoading = false
                return
              }

              if (allPosts.length === 0) {
                totalElement.textContent = mainTotal.toString() // 完成时移除省略号
                totalElement.classList.remove('loading-dots') // 移除加载动画
                localStorage.setItem(cacheKey, mainTotal.toString())
                localStorage.setItem(cacheTimeKey, Date.now().toString())
                updateProgress(100)
                setTimeout(() => hideLoading(), 500)
                isLoading = false
                return
              }

              // 分批处理博客文章（优化性能）
              const batchSize = 15 // 减少批量大小以避免URL过长
              let blogTotal = 0
              const totalBatches = Math.ceil(allPosts.length / batchSize)
              let processedBatches = 0

              for (let i = 0; i < allPosts.length; i += batchSize) {
                const batch = allPosts.slice(i, i + batchSize)

                try {
                  const batchApiURL = `${serverURL}/api/article?path=${encodeURIComponent(batch.join(','))}&type=${encodeURIComponent(['time'])}&lang=en-US`
                  const batchResponse = await fetch(batchApiURL)
                  const batchResult = await batchResponse.json()

                  if (batchResult.data && Array.isArray(batchResult.data)) {
                    const batchSum = batchResult.data.reduce((sum, item) => {
                      return sum + (typeof item.time === 'number' ? item.time : 0)
                    }, 0)
                    blogTotal += batchSum
                  }

                  processedBatches++
                  const currentTotal = mainTotal + blogTotal

                  // 更新数字和进度 (30% 到 90% 之间按批次分布)
                  const batchProgress = 30 + (processedBatches / totalBatches) * 60
                  updateProgress(batchProgress)
                  totalElement.textContent = currentTotal.toString() + '...'

                  // 添加小延迟避免过于频繁的请求
                  if (i + batchSize < allPosts.length) {
                    await new Promise((resolve) => setTimeout(resolve, 300))
                  }
                } catch (error) {
                  console.warn('Failed to fetch batch pageview count:', error)
                  processedBatches++
                  // 即使出错也要更新数字和进度
                  const currentTotal = mainTotal + blogTotal
                  const batchProgress = 30 + (processedBatches / totalBatches) * 60
                  updateProgress(batchProgress)
                  totalElement.textContent = currentTotal.toString() + '...'
                }
              }

              // 保存最终结果到缓存
              const finalTotal = mainTotal + blogTotal
              totalElement.textContent = finalTotal.toString() // 最终完成时移除省略号
              totalElement.classList.remove('loading-dots') // 移除加载动画
              localStorage.setItem(cacheKey, finalTotal.toString())
              localStorage.setItem(cacheTimeKey, Date.now().toString())
              updateProgress(100)
              setTimeout(() => hideLoading(), 1000)
            } catch (error) {
              console.warn('Error in blog posts loading:', error)
              totalElement.textContent = mainTotal.toString() // 错误时也移除省略号
              totalElement.classList.remove('loading-dots') // 移除加载动画
              localStorage.setItem(cacheKey, mainTotal.toString())
              localStorage.setItem(cacheTimeKey, Date.now().toString())
              updateProgress(100)
              setTimeout(() => hideLoading(), 500)
            } finally {
              isLoading = false
            }
          }, 300) // 300ms 后开始加载博客数据
        } catch (error) {
          console.error('Error fetching main pageview count:', error)
          totalElement.textContent = 'Error' // 错误时显示Error，无需省略号
          totalElement.classList.remove('loading-dots')
          hideLoading()
          isLoading = false
        }
      }

      // 点击刷新功能
      totalElement.addEventListener('click', () => {
        if (!isLoading) {
          loadTotalPageviews(true)
        }
      })

      // 初次加载
      loadTotalPageviews()
    }
  })()
</script>
