---
/**
 * Mermaid diagram component
 * Renders Mermaid diagrams on the client side
 */

export interface Props {
  code: string
  id?: string
  class?: string
}

const {
  code,
  id = `mermaid-${Math.random().toString(36).substr(2, 9)}`,
  class: className = ''
} = Astro.props
---

<div class={`mermaid-container ${className}`} data-mermaid-code={code} id={id}>
  <pre class='mermaid-code' style='display: none;'>{code}</pre>
  <div class='mermaid-diagram'></div>
</div>

<script>
  // Import Mermaid dynamically to avoid SSR issues
  async function initMermaid() {
    const mermaid = await import('mermaid')

    // Configure Mermaid
    mermaid.default.initialize({
      startOnLoad: false,
      theme: 'default',
      themeVariables: {
        primaryColor: '#3b82f6',
        primaryTextColor: '#1f2937',
        primaryBorderColor: '#d1d5db',
        lineColor: '#6b7280',
        secondaryColor: '#f3f4f6',
        tertiaryColor: '#f9fafb'
      },
      flowchart: {
        htmlLabels: true,
        curve: 'basis'
      },
      sequence: {
        diagramMarginX: 50,
        diagramMarginY: 10,
        actorMargin: 50,
        width: 150,
        height: 65,
        boxMargin: 10,
        boxTextMargin: 5,
        noteMargin: 10,
        messageMargin: 35
      },
      gantt: {
        titleTopMargin: 25,
        barHeight: 20,
        fontSize: 11,
        gridLineStartPadding: 35,
        numberSectionStyles: 4
      }
    })

    // Process all Mermaid containers
    const containers = document.querySelectorAll('.mermaid-container')

    for (const container of containers) {
      const codeElement = container.querySelector('.mermaid-code')
      const diagramElement = container.querySelector('.mermaid-diagram')

      if (codeElement && diagramElement) {
        const code = codeElement.textContent || ''
        const id = container.id

        try {
          // Render the diagram
          const { svg } = await mermaid.default.render(`${id}-svg`, code)
          diagramElement.innerHTML = svg

          // Hide the code element
          codeElement.style.display = 'none'

          // Add some styling to the diagram
          diagramElement.style.display = 'flex'
          diagramElement.style.justifyContent = 'center'
          diagramElement.style.margin = '1rem 0'

          // Make SVG responsive
          const svgElement = diagramElement.querySelector('svg')
          if (svgElement) {
            svgElement.style.maxWidth = '100%'
            svgElement.style.height = 'auto'
          }
        } catch (error) {
          console.error('Error rendering Mermaid diagram:', error)
          diagramElement.innerHTML = `
          <div style="color: red; padding: 1rem; border: 1px solid red; border-radius: 0.5rem; background: #fef2f2;">
            <strong>Mermaid Diagram Error:</strong><br>
            <code>${error.message}</code>
          </div>
        `
        }
      }
    }
  }

  // Initialize when DOM is loaded
  if (document.readyState === 'loading') {
    document.addEventListener('DOMContentLoaded', initMermaid)
  } else {
    initMermaid()
  }
</script>

<style>
  .mermaid-container {
    margin: 1.5rem 0;
    text-align: center;
  }

  .mermaid-diagram {
    display: flex;
    justify-content: center;
    align-items: center;
    min-height: 100px;
  }

  .mermaid-diagram svg {
    max-width: 100%;
    height: auto;
    font-family: inherit;
  }

  /* Dark mode support */
  @media (prefers-color-scheme: dark) {
    .mermaid-diagram svg {
      filter: invert(0.9) hue-rotate(180deg);
    }

    .mermaid-diagram svg .node rect,
    .mermaid-diagram svg .node circle,
    .mermaid-diagram svg .node polygon {
      filter: invert(1) hue-rotate(180deg);
    }
  }
</style>
