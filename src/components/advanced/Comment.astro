---
import { cn } from '@/utils'
import { integrationConfig } from '@/site-config'

const { class: className } = Astro.props
---

{
  integrationConfig.waline.enable && (
    <comment-component>
      <div id='waline' class={cn('not-prose', className)}>
        Comment seems to stuck. Try to refresh?âœ¨
      </div>
    </comment-component>
  )
}

<script>
  import { integrationConfig, siteConfig } from '@/site-config'

  const walineConfig = integrationConfig.waline

  class Comment extends HTMLElement {
    private loaded = false

    constructor() {
      super()
    }

    async loadWaline() {
      if (this.loaded) return
      this.loaded = true

      try {
        // Dynamic import for better performance
        const [{ init: walineInit }] = await Promise.all([
          import('@waline/client'),
          // Load styles directly from CDN to avoid bundling issues
          new Promise((resolve) => {
            const link = document.createElement('link')
            link.rel = 'stylesheet'
            link.href = 'https://unpkg.com/@waline/client@v3/dist/waline.css'
            link.onload = () => resolve(true)
            document.head.appendChild(link)
          })
        ])

        // Prevent Vue log errors
        ;(globalThis as unknown as { __VUE_OPTIONS_API__: boolean }).__VUE_OPTIONS_API__ = true
        ;(globalThis as unknown as { __VUE_PROD_DEVTOOLS__: boolean }).__VUE_PROD_DEVTOOLS__ = false
        ;(
          globalThis as unknown as { __VUE_PROD_HYDRATION_MISMATCH_DETAILS__: boolean }
        ).__VUE_PROD_HYDRATION_MISMATCH_DETAILS__ = false

        const emoji = walineConfig.emoji?.map(
          (preset) => `${siteConfig.npmCDN}/@waline/emojis@1.2.0/${preset}` as any
        )

        walineInit({
          el: '#waline',
          serverURL: walineConfig.server || '',
          emoji,
          reaction: ['/icons/heart-item.svg'],
          ...walineConfig.additionalConfigs
        })
      } catch (error) {
        console.error('Failed to load Waline:', error)
        const walineEl = this.querySelector('#waline')
        if (walineEl) {
          walineEl.innerHTML = 'Failed to load comments. Please refresh and try again.'
        }
      }
    }

    connectedCallback() {
      // Use Intersection Observer to load comments only when they come into view
      const observer = new IntersectionObserver(
        (entries) => {
          entries.forEach((entry) => {
            if (entry.isIntersecting) {
              this.loadWaline()
              observer.disconnect()
            }
          })
        },
        { rootMargin: '100px' }
      )

      observer.observe(this)
    }
  }

  if (walineConfig.enable) customElements.define('comment-component', Comment)
</script>

<style>
  /* Basic theme */
  #waline {
    /* Font size */
    --waline-font-size: 16px;
    /* Basic color */
    --waline-white: hsl(var(--background), var(--tw-bg-opacity, 1));
    --waline-light-grey: #999;
    --waline-dark-grey: #666;
    /* Theme color */
    --waline-theme-color: hsl(var(--foreground) / var(--tw-text-opacity, 1));
    --waline-active-color: hsl(var(--primary) / var(--tw-text-opacity, 1));
    /* Layout */
    --waline-color: hsl(var(--muted-foreground) / var(--tw-text-opacity, 1));
    --waline-bg-color: hsl(var(--muted) / var(--tw-text-opacity, 1));
    --waline-bg-color-light: hsl(var(--input) / var(--tw-text-opacity, 1));
    --waline-bg-color-hover: #f0f0f0;
    --waline-border-color: hsl(var(--border) / var(--tw-border-opacity, 1));
    --waline-disable-bg-color: #f8f8f8;
    --waline-disable-color: #bbb;
    --waline-code-bg-color: #282c34;
    /* Special */
    --waline-bq-color: #f0f0f0;
    /* Avatar */
    --waline-avatar-size: 3.25rem;
    --waline-m-avatar-size: calc(var(--waline-avatar-size) * 9 / 13);
    /* Badge */
    --waline-badge-color: hsl(var(--border) / var(--tw-border-opacity, 1));
    --waline-badge-font-size: 0.775em;
    /* Info */
    --waline-info-bg-color: var(--waline-bg-color-light);
    --waline-info-color: var(--waline-color);
    --waline-info-font-size: 0.625em;
    /* Render selection */
    --waline-border: 1px solid var(--waline-border-color);
    --waline-avatar-radius: 50%;
    --waline-box-shadow: none;
  }

  /* Reaction buttons */
  #waline :global(.wl-reaction-title, .wl-reaction-text) {
    display: none;
  }
  #waline :global(.wl-reaction) {
    overflow: visible;
    margin-bottom: 0.5em;
  }
  #waline :global(.wl-reaction-img) {
    width: auto;
    display: flex;
    height: 35px;
    align-items: center;
    column-gap: 0.4rem;
  }
  #waline :global(.wl-reaction-votes) {
    position: inherit;
    top: inherit;
    min-width: inherit;
    inset-inline-end: inherit;
    display: flex;
    font-weight: normal;
    border: none;
    background: none;
    color: inherit;
    padding: 0.2rem 0.4rem;
    border-radius: 6px;
  }
  #waline :global(.wl-reaction-loading) {
    position: inherit;
    top: inherit;
    min-width: inherit;
  }
  #waline :global(.wl-reaction-item.active .wl-reaction-votes) {
    background: var(--waline-theme-color);
    color: var(--waline-bg-color);
  }

  #waline :global(.wl-reaction-votes:after) {
    margin-left: 0.25em;
    content: 'Like(s)';
    display: inline-block;
    clear: both;
    border: 0;
  }
  #waline :global(.wl-reaction img) {
    filter: invert(25%);
  }
  :global(.dark) #waline :global(.wl-reaction img) {
    filter: invert(75%);
  }
</style>
