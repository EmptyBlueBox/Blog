---
import { Image } from 'astro:assets'
import type { CollectionEntry } from 'astro:content'

import PageInfo from '@/components/pages/PageInfo.astro'
import { FormattedDate } from '@/components/user'

interface Props {
  content: CollectionEntry<'post'>
}

const {
  content: { slug, data, render }
} = Astro.props

const { remarkPluginFrontmatter } = await render()

const dateTimeOptions: Intl.DateTimeFormatOptions = {
  month: 'short'
}
---

{
  data.heroImage && (
    <div class='hero-image relative mb-6'>
      {/* @ts-expect-error: image support this type */}
      <Image
        alt={data.heroImage.alt || data.title}
        class='cover-image relative z-10 rounded-2xl object-contain opacity-0 transition-opacity duration-300'
        fetchpriority='high'
        loading='eager'
        src={data.heroImage.src}
        id='mainHeroImage'
      />
      {/* @ts-expect-error: image support this type */}
      <Image
        alt={data.heroImage.alt || data.title}
        fetchpriority='high'
        loading='eager'
        src={data.heroImage.src}
        id='blurImage'
        class='absolute z-0 rounded-3xl opacity-0 blur-xl transition-opacity duration-300'
      />
    </div>
  )
}

{data.draft ? <span class='text-red-500'>(Draft)</span> : null}

<div class='article-info animate max-lg:mx-auto'>
  <div class='flex flex-wrap gap-x-4 gap-y-2 text-xs leading-6 text-muted-foreground'>
    {/* Article date */}
    <div class='flex items-center gap-1'>
      <svg class='size-5'>
        <use href='/icons/ui.svg#mingcute-calendar-2-line'></use>
      </svg>
      <FormattedDate class='font-sans' date={data.publishDate} dateTimeOptions={dateTimeOptions} />
      {
        data.updatedDate && (
          <div class='flex items-center gap-1'>
            <span> / </span>
            <span>
              Update
              <FormattedDate
                class='font-sans'
                date={data.updatedDate}
                dateTimeOptions={dateTimeOptions}
              />
            </span>
          </div>
        )
      }
    </div>
    {/* Times read */}
    <div class='flex items-center gap-1'>
      <svg class='size-5'>
        <use href='/icons/ui.svg#mingcute-time-line'></use>
      </svg>
      {remarkPluginFrontmatter.minutesRead}
    </div>
    {
      // Language
      data.language && (
        <span class='flex items-center gap-1'>
          <svg class='size-5'>
            <use href='/icons/project.svg#mingcute-earth-2-line' />
          </svg>
          {data.language}
        </span>
      )
    }
    {
      // Tags
      !!data.tags?.length && (
        <span class='inline-flex items-center'>
          <svg class='size-5'>
            <use href='/icons/ui.svg#mingcute-hashtag-line' />
          </svg>
          <span class='ms-1'>
            {data.tags.map((tag: string, i: number) => (
              <>
                <a
                  aria-label={`View more posts with the tag ${tag}`}
                  class='text-xs hover:underline hover:underline-offset-4'
                  data-pagefind-filter='tag'
                  href={`/tags/${tag}`}
                >
                  {tag}
                </a>
                {i < data.tags.length - 1 ? ' / ' : null}
              </>
            ))}
          </span>
        </span>
      )
    }
  </div>

  <h1 class='mt-4 text-2xl font-medium sm:mb-2 sm:mt-6 sm:text-3xl'>
    {data.title}
  </h1>

  <div class='mt-3 italic'>
    <blockquote class='text-sm text-muted-foreground'><q>{data.description}</q></blockquote>
    {!data.draft && <PageInfo class='mt-1' path={`/blog/${slug}`} />}
  </div>
</div>

{/* Dividing line */}
<div class='mt-4 w-1/2 border-t max-lg:mx-auto sm:mt-6 sm:w-1/3'></div>

<script>
  const viewportHeight = window.innerHeight
  const threshold1 = viewportHeight / 9
  const threshold2 = (viewportHeight * 2) / 9
  const threshold3 = (viewportHeight * 3) / 9
  const image = document.getElementById('blurImage') as HTMLImageElement
  const mainHeroImage = document.getElementById('mainHeroImage') as HTMLImageElement

  // Hero image responsive logic
  if (mainHeroImage) {
    const adjustHeroImageDisplay = () => {
      const imgElement = mainHeroImage
      const blurElement = image
      const containerHeight = window.innerHeight / 3 // 屏幕高度的 1/3

      // Wait for image to load
      if (imgElement.complete) {
        checkImageDimensions()
      } else {
        imgElement.addEventListener('load', checkImageDimensions)
      }

      function checkImageDimensions() {
        // Get the natural dimensions of the image
        const naturalWidth = imgElement.naturalWidth
        const naturalHeight = imgElement.naturalHeight

        // Calculate what the height would be if we scale to fit width
        const containerWidth = imgElement.parentElement?.clientWidth || window.innerWidth
        const scaledHeight = (naturalHeight * containerWidth) / naturalWidth

        if (scaledHeight <= containerHeight) {
          // 图片高度不超过屏幕高度的1/5，左右占满
          imgElement.className =
            'cover-image relative z-10 h-auto w-full rounded-2xl object-contain opacity-100 transition-opacity duration-300'
          // 重置主图片样式
          imgElement.style.height = ''
          imgElement.style.maxWidth = ''
          imgElement.style.margin = ''
          imgElement.style.display = ''

          // 背景虚化图片也左右占满
          if (blurElement) {
            blurElement.className =
              'absolute end-0 top-4 z-0 mt-0 h-full w-full rounded-3xl opacity-60 blur-xl transition-opacity duration-300'
            blurElement.style.height = ''
            blurElement.style.width = ''
            blurElement.style.maxWidth = ''
            blurElement.style.objectFit = ''
            blurElement.style.margin = ''
            blurElement.style.display = ''
            blurElement.style.top = ''
            blurElement.style.left = ''
            blurElement.style.transform = ''
            blurElement.style.right = ''
          }
        } else {
          // 图片高度超过屏幕高度的1/5，上下占满
          imgElement.className =
            'cover-image relative z-10 w-auto rounded-2xl object-contain opacity-100 transition-opacity duration-300'
          imgElement.style.height = `${containerHeight}px`
          imgElement.style.maxWidth = '100%'
          imgElement.style.margin = '0 auto'
          imgElement.style.display = 'block'

          // 背景虚化图片也上下占满
          if (blurElement) {
            blurElement.className =
              'absolute z-0 rounded-3xl opacity-60 blur-xl transition-opacity duration-300'
            blurElement.style.height = `${containerHeight}px`
            blurElement.style.width = 'auto'
            blurElement.style.maxWidth = '100%'
            blurElement.style.objectFit = 'contain'
            blurElement.style.margin = '0 auto'
            blurElement.style.display = 'block'
            blurElement.style.top = '1rem'
            blurElement.style.left = '50%'
            blurElement.style.transform = 'translateX(-50%)'
            blurElement.style.right = 'auto'
          }
        }
      }
    }

    // Initial adjustment
    adjustHeroImageDisplay()

    // Adjust on window resize
    window.addEventListener('resize', adjustHeroImageDisplay)

    // Fallback: 确保图片在一定时间后显示，即使JavaScript出错
    setTimeout(() => {
      if (
        mainHeroImage &&
        mainHeroImage.style.opacity !== '1' &&
        !mainHeroImage.className.includes('opacity-100')
      ) {
        mainHeroImage.className = mainHeroImage.className.replace('opacity-0', 'opacity-100')
      }
      // 也确保虚化图片显示
      if (
        image &&
        !image.className.includes('opacity-60') &&
        (image.style.opacity === '' || image.style.opacity === '0')
      ) {
        image.className = image.className.replace('opacity-0', 'opacity-60')
      }
    }, 2000)
  }

  if (image) {
    // 等待图片初始化完成后再启用滚动效果
    let isImageInitialized = false

    // 检查图片是否已经初始化
    const checkInitialization = () => {
      if (image.className.includes('opacity-60') || image.style.opacity === '0.6') {
        isImageInitialized = true
      }
    }

    // 定期检查直到初始化完成
    const initChecker = setInterval(() => {
      checkInitialization()
      if (isImageInitialized) {
        clearInterval(initChecker)
      }
    }, 100)

    // 2.5秒后强制启用滚动效果
    setTimeout(() => {
      isImageInitialized = true
      clearInterval(initChecker)
    }, 2500)

    window.addEventListener('scroll', () => {
      // 只有在图片初始化完成后才应用滚动效果
      if (!isImageInitialized) return

      const scrollDistance = window.scrollY
      // console.log(scrollDistance, threshold1, threshold2, threshold3)

      if (scrollDistance >= threshold3) {
        image.style.opacity = '0.15'
      } else if (scrollDistance >= threshold2) {
        image.style.opacity = '0.3'
      } else if (scrollDistance >= threshold1) {
        image.style.opacity = '0.45'
      }
    })
  }
</script>
