---
interface SubstatsItem {
  platform: string
  icon: string
  color?: string
  link?: string
  text: string
  api?: string
  count?: number
}

type Props = {
  stats: SubstatsItem[]
}

const { stats } = Astro.props as Props
---

<div class='grid grid-cols-1 gap-3 rounded-2xl border p-2 sm:grid-cols-2 sm:p-3'>
  {
    stats.map(({ link, platform, icon, color, count, text }) => (
      <a
        class='group text-muted-foreground no-underline'
        href={link}
        target='_blank'
        rel='noopener noreferrer'
      >
        <div class='flex items-center gap-3 rounded-2xl border border-transparent px-3 py-2 transition-all hover:border-border hover:bg-muted'>
          {icon && (
            <svg
              class='size-6'
              style={{ color: color ? color : 'hsl(var(--foreground) / var(--tw-text-opacity))' }}
            >
              <use href={`/icons/${icon}`} />
            </svg>
          )}
          <div class='flex-1 text-foreground transition-colors group-hover:text-primary'>
            {platform}
          </div>
          <div
            class:list={['flex items-center gap-1.5', !count && 'text-muted-foreground']}
            data-platform={platform}
          >
            <samp>{count ?? '-'}</samp>
            <span class='text-sm font-normal'>{text}</span>
          </div>
        </div>
      </a>
    ))
  }
</div>
<div class='mt-2 text-left text-sm'>
  Powered by <a
    class='text-muted-foreground'
    href='http://github.com/spencerwooo/substats'
    target='_blank'
    rel='noopener noreferrer'>Substats</a
  >
</div>

<script define:vars={{ stats: stats }}>
  async function fetchCount(item) {
    if (!item.api) return item.count

    // 如果已经有预定义的count值，就直接使用它，不调用API
    if (item.count !== undefined) return item.count

    const originalCount = item.count

    try {
      if (item.platform === 'Bilibili') {
        const response = await fetch(`/api/bilibili?vmid=${item.api}`)
        const data = await response.json()
        if (data.code !== 0) {
          console.error(`Bilibili API error: ${data.message}`)
          return originalCount
        } else {
          return data.data.follower
        }
      } else {
        // 尝试从主 API 获取数据
        try {
          const response = await fetch(`https://api.swo.moe/stats/${item.api}`)
          const data = await response.json()
          if (data.failed) {
            throw new Error(data.message)
          } else {
            return data.count
          }
        } catch (primaryError) {
          // 如果主 API 失败，尝试从备用 API 获取数据
          console.error(`Error fetching from primary API for ${item.platform}:`, primaryError)
          try {
            const response = await fetch(`https://api.spencerwoo.com/substats/?source=${item.api}`)
            const data = await response.json()
            if (data.status === 'success') {
              return data.data.totalSubs
            } else {
              throw new Error(data.message)
            }
          } catch (backupError) {
            console.error(`Error fetching from backup API for ${item.platform}:`, backupError)
            return originalCount
          }
        }
      }
    } catch (error) {
      console.error(`Error in Substatus fetching for ${item.platform}:`, error)
      return originalCount
    }
  }

  async function updateAllCountsParallel() {
    const promises = stats.map(async (item) => {
      const count = await fetchCount(item)
      if (count !== undefined) {
        return { platform: item.platform, count }
      }
      return null
    })

    const results = await Promise.all(promises)

    for (const result of results) {
      if (result && result.count !== undefined) {
        const { platform, count } = result
        const container = document.querySelector(`[data-platform="${platform}"]`)
        if (container) {
          const samp = container.querySelector('samp')
          if (samp) {
            samp.textContent = count.toString()
          }
          container.classList.remove('text-muted-foreground')
        }
      }
    }
  }

  document.addEventListener('DOMContentLoaded', updateAllCountsParallel)
</script>
