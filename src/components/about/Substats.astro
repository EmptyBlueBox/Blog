---
interface SubstatsItem {
  platform: string
  icon: string
  color?: string
  link?: string
  text: string
  api?: string
  count?: number
}

type Props = {
  stats: SubstatsItem[]
}

const { stats } = Astro.props as Props

async function fetchCount(item: SubstatsItem) {
  if (!item.api) return
  try {
    if (item.platform === 'Bilibili') 
    {
      const response = await fetch(`https://api.bilibili.com/x/relation/stat?vmid=${item.api}`)
      const data = await response.json()
      if (data.code !== 0) {
        console.error(`Bilibili API error: ${data.message}`)
        item.count = undefined
      } else {
        item.count = data.data.follower
      }
    } 
    else 
    {
      // 尝试从主 API 获取数据
      try {
        const response = await fetch(`https://api.swo.moe/stats/${item.api}`)
        const data = await response.json()
        if (data.failed) 
        {
          throw new Error(data.message)
        } else {
          item.count = data.count
        }
      } catch (primaryError) {
        // 如果主 API 失败，尝试从备用 API 获取数据
        console.error(`Error fetching from primary API for ${item.platform}:`, primaryError)
        try {
          const response = await fetch(`https://api.spencerwoo.com/substats/?source=${item.api}`)
          const data = await response.json()
          if (data.status === 'success') {
            item.count = data.data.totalSubs
          } else {
            throw new Error(data.message)
          }
        } catch (backupError) {
          console.error(`Error fetching from backup API for ${item.platform}:`, backupError)
          item.count = undefined
        }
      }
    }
  } catch (error) {
    console.error(`Error in Substatus fetching for ${item.platform}:`, error)
    item.count = undefined
  }
}

await Promise.all(stats.map(fetchCount))
---

<div class='grid grid-cols-1 gap-3 rounded-xl border p-2 sm:grid-cols-2 sm:p-3'>
  {
    stats.map(({ link, platform, icon, color, count, text }) => (
      <a
        class='group text-muted-foreground no-underline'
        href={link}
        target='_blank'
        rel='noopener noreferrer'
      >
        <div class='flex items-center gap-3 rounded-lg border border-transparent px-3 py-2 transition-all hover:border-border hover:bg-muted'>
          {icon && (
            <svg
              class='size-6'
              style={{ color: color ? color : 'hsl(var(--foreground) / var(--tw-text-opacity))' }}
            >
              <use href={`/icons/${icon}`} />
            </svg>
          )}
          <div class='flex-1 text-foreground transition-colors group-hover:text-primary'>
            {platform}
          </div>
          {count ? (
            <div class='flex items-center gap-1.5'>
              <samp>{count}</samp>
              <span class='text-sm font-normal'>{text}</span>
            </div>
          ) : (
            <div class='flex items-center gap-1.5 text-muted-foreground'>
              <span class='text-sm'>-</span>
              <span class='text-sm font-normal'>{text}</span>
            </div>
          )}
        </div>
      </a>
    ))
  }
</div>
<div class='mt-2 text-right text-sm'>
  Display real-time; powered by <a
    class='text-muted-foreground'
    href='http://github.com/spencerwooo/substats'
    target='_blank'
    rel='noopener noreferrer'>Substats</a
  >
</div>
